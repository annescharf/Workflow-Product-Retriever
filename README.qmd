---
format: gfm
editor: source
---

# Workflow Product Retriever

MoveApps

Github repository: <https://github.com/dmpstats/Workflow-Products-Retriever>


## Description

Retrieves and appends Products from Apps in concurrent Workflows to the current
input data set via the MoveApps API, effectively enabling the integration between
multiple Workflows.



## Documentation

This App allows users to retrieve objects created in other Workflows and append
them to the App's input data, facilitating data exchanges among concurrent
Workflows. It uses MoveApps' API functionality in creating stable HTTP links for
accessing up-to-date App Products, such as artifacts and output files.

In practice, this App retrieves a single Product generated by a specific App
within an active instance of a concurrent Workflow. The downloaded object is
then attached to the input `move2` data as an [`R` object
attribute](https://stat.ethz.ch/R-manual/R-devel/library/base/html/attr.html)
named `appended_products` (see [Output data](#output-data) for further details).

In a broader sense, its primary utility can be seen as a retriever and collector
of Workflow Products covering a broad range of object types (`move2::move2_loc`,
`move2::move2_nonloc`, `move::moveStack`, `data.frame`, `tibble`, model
objects, etc.). The app explicitly refrains from attempting to combine or merge
the fetched data with the input data, leaving these operations to subsequent
downstream apps.

Users can employ multiple instances of this App, chaining them sequentially or
deploying them at various points within the current Workflow, to collect
multiple Products from other Workflows. Retrieved objects are consecutively
appended to the input's `appended_products` attribute as list elements.

::: {.callout-important}
In order to use the App's functionality, the user must first create stable API links
to the Workflow instance containing the desired Product(s). Instructions for
generating API access credentials for your Workflows are available in the
[MoveApps API Links guide](https://docs.moveapps.org/#/API).
:::

Using the Workflow instance API access credentials, users are required to specify the
name of the target Product, along with either the title or the position of the
App within Workflow where it is located. 

Please beware that not all types of files can be retrieved - currently supported
Product file-types are:

  - **`.csv`**
  - **`.txt`**
  - **`.rds`**


Finally, this App can serve as either the starting point of a Workflow or as an
in-between App. In the former case - still dependent on functionality soon to be
available in MoveApps - the App appends the retrieved Product object(s) to an
empty  `move2` object (i.e. with zero rows).


### Input data

A `move2` object.


### Output data

A `move2` object. 

Objects contained in a retrieved target Product are appended to the input
`move2` data as an object attribute called `appended_products` - this forms the
App's Output data. Further details for App developers and advanced users on how
to access the appended products can be found is section [Accessing appended
Products](#accessing-appended-products).



### Artefacts

`appended_product_metadata.csv`: a table with the metadata of the appended
Workflow Product.



### Parameters

**ID of Target Workflow Instance** (`usr`): the API's ID (i.e. Username) of the
Workflow Instance containing the target Product (check
<https://docs.moveapps.org/#/API>). Default: `NULL`.


**Password of Target Workflow Instance** (`pwd`): the API's Password of the
Workflow Instance containing the target Product (check
<https://docs.moveapps.org/#/API>). Default: `NULL`.

**Target Workflow Title** (`workflow_title`): the name of the Workflow  with the
target Product. While we recommend using the full title for clarity, aliases or
acronyms are accepted. Default: `NULL`.

**Target App Title** (`app_title`): the name of the App comprising the target
Product. Please ensure the name of the App is accurate. Not required if 'Target
App Position in Workflow' is specified. Default: `NULL`.

**Target App Position in Workflow** (`app_pos`): Enter the position of the App
containing the target Product in the Workflow's pipeline. Not required if
'Target App Title' is specified. Default: `NULL`.

**Target Product Filename** (`product_file`): the target Product name. Please
ensure the filename is accurate. You can omit the extension, unless multiple
artifact files in the target App share the same basename. Currently supported target Product
file-types: '.rds', '.csv', and '.txt'. Default: `NULL`.


### Most common errors

If any of the inputs specified for the parameters fail to contribute to the
correct identification of the target Product for retrieval, the App will
generate informative error messages pointing to where the misspecification
occurred. The most common misspecifications include:

  - inaccurate naming of target App and/or Product names, 
  - absence of intended target Products in specified target App, 
  - inconsistency between the specified name of the target App and the specified 
  position of that App in the target Workflow


::: {.callout-caution}
The App's base code was developed based on the existing structure and attribute
names underlying MoveApps's API framework. If there are changes to naming
conventions or alterations in the way API links are constructed in the future,
the code will become susceptible to errors in HTTP requests.
:::

### Null or error handling

Parameters `usr`, `pwd` and `product_file` must be specified, whereas at least
one of `app_title` and `app_pos` needs to be provided.

The `workflow_title` parameter is optional since Workflow identification is
already provided by `usr`. However, we strongly recommend specifying an clear and
identifiable name for the target Workflow to ensure clarity when using appended
Products in downstream Apps.


### Accessing appended Products

```{r}
#| message: false
#| warning: false
#| include: false

library(move2)
library(purrr)

# Helpers
source("tests/app-testing-helpers.r")
set_interactive_testing()

# appending a move2 object
app1_output <- rFunction(
  data = readRDS("data/raw/input2.rds"),
  usr = usr, 
  pwd = pwd, 
  workflow_title = "Mock",
  app_pos = 2, 
  product_file = "data_wtime")

app_output <- rFunction(
  data = app1_output,
  usr = usr, 
  pwd = pwd, 
  workflow_title = "mock",
  app_pos = 8, 
  product_file = "summarystats")

```

This section offers additional information about the App's Output data. It is
specifically useful for App developers looking to use the functionality of
this App for creating downstream Apps. Advanced MoveApps users intending to
utilize the output data locally will also find this section beneficial.

As described [above](#documentation), this App retrieves a single Product
generated whithin a given App during a concurrent Workflow. It appends the
objects comprised in the fetched Product to the input data via an object
attribute named `appended_products`. To allow App reusability, the
`appended_products` attribute is implemented as a list object, enabling the
sequential attachment of additional Product objects if users chose the deploy
the App multiple times in the current Workflow. Furthermore, each list element
under the `appended_products` comprises a sub-list with two elements:

  - `metadata`, holding high-level information about the appended Product (e.g. 
  original Workflow and App titles, last time modified, etc.)
  - `object`, storing the actual object(s) contained in the Product.


Appended objects in the Output data can be accessed via the function `attr()`.
For example, to access the appended products in an output data object called
`app_output` obtained after applying this App twice to retrieve Products from
two different apps in a concurrent (mock) Workflow, we could run the following:

```{r}
apnd_prods <- attr(app_output, "appended_products")
length(apnd_prods)
```

Thus, to check the metadata of the first appended product:
```{r}
apnd_prods |> 
  purrr::pluck(1) |> 
  purrr::pluck("metadata")
```
Analogously, to visualize the metadata and actual data in the second appended
Product, we pick the second list element by running:
```{r}
apnd_prods |> 
  purrr::pluck(2)
```

