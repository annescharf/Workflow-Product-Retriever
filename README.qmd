---
format: gfm
editor: source
---

# Workflow Product Retriever

MoveApps

Github repository: <https://github.com/dmpstats/Workflow-Products-Retriever>


## Description

Retrieves a Product of a given App comprised in a concurrent Workflow and
combines it with the input data set, enabling data integration between
multiple Workflows.



## Documentation

This App allows users to retrieve objects created in other Workflows and combine
them with the App's input data, enabling data exchanges between concurrent
Workflows. It uses MoveApps' API functionality in creating stable HTTP links for
accessing up-to-date App Products, such as artifacts and output files.

In practice, this App retrieves a single Product generated by a specific App
within an active instance of a concurrent Workflow. The downloaded object is
then appended to the input `move2::move2_loc` data according to the following operating
rule:

- If the retrieved Product is also a `move2::move2_loc` object, its data is 
**stacked** to the input data
- Otherwise, the retrieved Product is **attached** to the input data via an object
[attribute](https://stat.ethz.ch/R-manual/R-devel/library/base/html/attr.html)
named `appended_products`.

This dual approach offers the flexibility to collect a wide range of object
types and classes (`move2::move2_loc`, `move2::move2_nonloc`, `move::moveStack`,
`data.frame`, `tibble`, model objects, etc.), expanding the usability of the
output in downstream Apps. Currently, the App supports the retrieval of Products
stored under the following file-types:

- **`.csv`**
- **`.txt`**
- **`.rds`**

Users can employ multiple instances of the App whithin a Workflow, linking them
sequentially or deploying them at different stages of the Workflow, to collect
multiple Products from other Workflows. Furthermore, the App can function as
either the initial App of a Workflow or as an intermediary App.


::: {.callout-important}
In order to use the App's functionality, the user must first create stable API links
to the Workflow instance containing the desired Product(s). Instructions for
generating API access credentials for your Workflows are available in the
[MoveApps API Links guide](https://docs.moveapps.org/#/API).
:::


Using the Workflow instance API access credentials, users are required to specify the
name of the target Product, along with either the title or the position of the
App within Workflow where it is located. 


#### Further details

As explained above, the method of appending the retrieved product to the
input dataset depends on whether the fetched object is of class
`move2::move2_loc` (stacked) or another class (attached via an attribute).
Additionally:

- When stacking, the App offers an option to manage duplicated track IDs between
the two stacked datasets. Users can choose between merging or renaming
the duplicated IDs (see `track_combine` in Section [Parameters](#parameters)).

- In case the stacked dataset includes time-location duplicates, the App
automatically removes the duplicated rows with less information, accompanied by
a warning message.

- If stacking involves objects with different CRS projections, the retrieved `move2::move2_loc`
data is pre-projected match the CRS of the input dataset before the stacking
step takes place (a warning message is issued).

- When attaching, the retrieved product is assigned to the list element `object`
of the output's `appended_products` attribute (see Section [Accessing Attached
Products](#accessing-attached-products) for further details).

- Regardless of the appending method used, metadata containing pertinent
information on the retrieved product (e.g. source Workflow instance, App Title,
Product filename, time of last modification) is stored in list element
`metadata` of the output's `appended_products` attribute.

- The `appended_products` attribute is a `list` object, meaning Products
retrieved in multiple deployments of the App whithin a Workflow are added
consecutively as list elements.



### Input data

A `move2::move2_loc` object.


### Output data

A `move2::move2_loc` object comprising the extra attribute `appended_products`.
See sections [Further Details](#further-details) and [Accessing Attached
Products](#accessing-attached-products) from more info.



### Artefacts

`appended_product_metadata.csv`: a table with the metadata of the appended
Workflow Product.



### Parameters

**ID of Target Workflow Instance** (`usr`): the API's ID (i.e. Username) of the
Workflow Instance containing the target Product (check
<https://docs.moveapps.org/#/API>). Default: `NULL`.


**Password of Target Workflow Instance** (`pwd`): the API's Password of the
Workflow Instance containing the target Product (check
<https://docs.moveapps.org/#/API>). Default: `NULL`.

**Target Workflow Title** (`workflow_title`): the name of the Workflow  with the
target Product. While we recommend using the full title for clarity, aliases or
acronyms are accepted. Default: `NULL`.

**Target App Title** (`app_title`): the name of the App comprising the target
Product. Please ensure the name of the App is accurate. Not required if 'Target
App Position in Workflow' is specified. Default: `NULL`.

**Target App Position in Workflow** (`app_pos`): Enter the position of the App
containing the target Product in the Workflow's pipeline. Not required if
'Target App Title' is specified. Default: `NULL`.

**Target Product Filename** (`product_file`): the target Product name. Please
ensure the filename is accurate. You can omit the extension, unless multiple
artifact files in the target App share the same basename. Currently supported target Product
file-types: '.rds', '.csv', and '.txt'. Default: `NULL`.

**Duplicated Track IDs** (`track_combine`): If the target Product is a 'move2_loc'
object, you can choose how to handle potential duplicated track IDs when
stacking input and retrieved datasets. The 'Merge' option combines tracks with
the same name, while the 'Rename' option assigns new names to non-unique tracks.
Default: 'Merge'.


### Most common errors

If any of the inputs specified for the App parameters fail to accurately
identify the target Product for retrieval, the App will generate informative
error messages pointing to where the misspecification occurred. Most common
misspecifications include:

  - inaccurate naming of target App title and/or Product filename, 
  - non-existence of the target Product in the specified App, 
  - inconsistency between the specified name of the target App and the specified 
  position of that App in the target Workflow


::: {.callout-caution}
The App's base code was developed based on the existing structure and attribute
names underlying MoveApps's API framework. If there are changes to naming
conventions or alterations in the way API links are constructed in the future,
the code will be susceptible to HTTP request errors.
:::

### Null or error handling

Parameters `usr`, `pwd` and `product_file` must be specified, whereas at least
one of `app_title` and `app_pos` needs to be provided.

The `workflow_title` parameter is optional since Workflow instance
identification is already provided by `usr`. However, we strongly recommend
specifying a clear and identifiable name for the target Workflow to ensure
clarity when potentially referring to appended Products in downstream Apps.


### Accessing Attached Products

```{r}
#| message: false
#| warning: false
#| include: false

library(move2)
library(purrr)

# Helpers
source("tests/app-testing-helpers.r")
set_interactive_testing()

# appending a move2 object
app1_output <- rFunction(
  data = readRDS("data/raw/input2.rds"),
  usr = usr, 
  pwd = pwd, 
  workflow_title = "Mock",
  app_pos = 2, 
  product_file = "data_wtime")

app_output <- rFunction(
  data = app1_output,
  usr = usr, 
  pwd = pwd, 
  workflow_title = "mock",
  app_pos = 8, 
  product_file = "app-output")

```

This section offers additional information about the App's Output data. It is
particularly relevant for App developers wanting to use the functionality of
this App for developing downstream Apps. Advanced MoveApps users intending to
use the output data locally can also find this section useful.

As described [above](#documentation), the `appended_products` attribute of the
Output is a `list` object storing the information, and on occasion, the actual
data of Products retrieved by the App from concurrent Workflows. Each list
element represents an instance of the App deployed within the current Workflow
up to the current stage, containing the relevant data of the fetched Product in
a sub-list with the following elements:

- `metadata`: holds high-level information about the appended Product (e.g.
original Workflow and App titles, last time modified, whether in was stacked or
annexed to the input data). This element is always present in
`appended_products`, regardless of the appending method used.

- `object`: stores the actual object(s) contained in the fetched Product when
they belong to classes other than `move2:move2_loc`.

Objects in `appended_products` can be accessed using the `attr()` function. For
example, the following code demonstrates how to access information and data from
appended objects after deploying this App twice to retrieve Products from two
different Apps in a concurrent (mock) Workflow. First, let's verify if two
Products have indeed been retrieved and appended to the App's current output object
(`app_output`).

```{r}
# quick look at the app's output object
app_output
```

```{r}
# extract the data stored in output's `appended_products` attribute
apnd_prods <- attr(app_output, "appended_products")
# number of appended products
length(apnd_prods)
```

We can then take a peak at the metadata of the two appended products.

```{r}
map(apnd_prods, ~.$metadata)
```

As indicated in the `append_type` column, the first retrieved product was
attached as an element of the Output's `appended_products` attribute, while the
second fetched product (of class `move2:move2_loc`) was stacked to the input
dataset.

To access the actual data in the first appended Product, we hoist the nested
element `object` from the first element of `apnd_prods`.

```{r}
apnd_prods |> 
  pluck(1) |> 
  pluck("object")
```

Data in the second appended product was stacked to the input dataset, and hence
the respective `object` element is non-existent.

```{r}
apnd_prods |> 
  pluck(2) |> 
  pluck("object")
```
